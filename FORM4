using System.Text;

namespace MADINA3
{
    public partial class Form4 : Form 
    {
        public Form4()
        {
            InitializeComponent();
        }

        private Random random = new Random(); 

        private void btnRotate_Click(object sender, EventArgs e)
        {
            int rows, cols;

            
            if (!int.TryParse(txtRows.Text, out rows) || rows <= 0) 
            {
                MessageBox.Show("Введите положительное число для строки", "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return; 
            }

            if (!int.TryParse(txtCols.Text, out cols) || cols <= 0) 
            {
                MessageBox.Show("Введите положительное число для столбца", "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return; 
            }

            try
            {
                double[,] originalMatrix = GenerateMatrix(rows, cols); 
                rtbOriginalMatrix.Text = MatrixToString(originalMatrix); 

                double[,] rotatedMatrix = RotateMatrix(originalMatrix); 

                rtbRotatedMatrix.Text = MatrixToString(rotatedMatrix); 
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Произошла ошибка: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private double[,] GenerateMatrix(int rows, int cols)
        {
            double[,] matrix = new double[rows, cols];
            for (int i = 0; i < rows; i++) 
            {
                for (int j = 0; j < cols; j++) 
                {
                    matrix[i, j] = random.NextDouble() * 10.0; 
                }
            }
            return matrix;
        }

        private double[,] RotateMatrix(double[,] originalMatrix)
        {
            int originalRows = originalMatrix.GetLength(0); 
            int originalCols = originalMatrix.GetLength(1); 

            int rotatedRows = originalCols;
            int rotatedCols = originalRows; 

            double[,] rotatedMatrix = new double[rotatedRows, rotatedCols]; 

            for (int r = 0; r < originalRows; r++) 
            {
                for (int c = 0; c < originalCols; c++)
                {
                    rotatedMatrix[c, originalRows - 1 - r] = originalMatrix[r, c]; 
                }
            }

            return rotatedMatrix; 
        }

        private string MatrixToString(double[,] matrix) 
        {
            int rows = matrix.GetLength(0); 
            int cols = matrix.GetLength(1);
            StringBuilder sb = new StringBuilder(); 

            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < cols; j++)
                {
                    
                    sb.Append($"{matrix[i, j]:F2}\t");
                }   
                sb.AppendLine();
            }

            return sb.ToString();
        }

            private void NavigateToForm(Form form)
        {
            form.Show();
            this.Hide();
        }
        private void button1_Click(object sender, EventArgs e)
        {
            NavigateToForm(new Form3());
        }

        private void button2_Click(object sender, EventArgs e)
        {
            NavigateToForm(new Form5());
        }
    }
}


